openapi: 3.0.3
info:
  title: Clinic-AI Intake Assistant API
  description: |
    AI-powered clinical intake system for small and mid-sized clinics.

    This API provides endpoints for patient registration and intake management,
    including AI-powered adaptive questioning for Step-01 functionality.

    ## Features
    - Patient registration with automatic ID generation
    - AI-powered adaptive questioning based on disease/complaint
    - Intake session management with question tracking
    - Supports any disease/complaint (free-text)
    - Maximum 8 questions per intake with early stopping capability (minimum ~3)

    ## Authentication
    Currently no authentication is required for development.

    ## Rate Limiting
    No rate limiting is currently implemented.
  version: 0.1.0
  contact:
    name: Clinic-AI Support
    email: support@clinicai.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://api.clinicai.com
    description: Production server

tags:
  - name: health
    description: Health check endpoints
  - name: patients
    description: Patient management and intake endpoints

paths:
  /:
    get:
      tags:
        - health
      summary: Root endpoint
      description: Get API information and available endpoints
      operationId: get_root
      responses:
        "200":
          description: API information
          content:
            application/json:
              schema:
                type: object
                properties:
                  service:
                    type: string
                    example: "Clinic-AI Intake Assistant"
                  version:
                    type: string
                    example: "0.1.0"
                  environment:
                    type: string
                    example: "development"
                  status:
                    type: string
                    example: "running"
                  docs:
                    type: string
                    example: "/docs"
                  endpoints:
                    type: object
                    properties:
                      health:
                        type: string
                        example: "/health"
                      register_patient:
                        type: string
                        example: "POST /patients/"
                      answer_intake:
                        type: string
                        example: "POST /patients/consultations/answer"

  /health/:
    get:
      tags:
        - health
      summary: Health check
      description: Check if the service is healthy and running
      operationId: health_check
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
              example:
                status: "healthy"
                timestamp: "2025-01-03T12:00:00Z"
                version: "0.1.0"
                service: "Clinic-AI Intake Assistant"

  /health/ready:
    get:
      tags:
        - health
      summary: Readiness check
      description: Check if the service is ready to handle requests
      operationId: readiness_check
      responses:
        "200":
          description: Service is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ready"
                  timestamp:
                    type: string
                    format: date-time
                  checks:
                    type: object
                    properties:
                      database:
                        type: string
                        example: "ok"
                      openai:
                        type: string
                        example: "ok"
                      memory:
                        type: string
                        example: "ok"

  /health/live:
    get:
      tags:
        - health
      summary: Liveness check
      description: Check if the service is alive
      operationId: liveness_check
      responses:
        "200":
          description: Service is alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "alive"
                  timestamp:
                    type: string
                    format: date-time

  /patients/:
    post:
      tags:
        - patients
      summary: Register a new patient
      description: |
        Register a new patient and start an intake session.

        This endpoint:
        1. Validates patient data (name, mobile, age, disease)
        2. Generates a patient ID in format: {NAME}_{MOBILE}
        3. If the same name and mobile already exist, a new visit is created for that patient
        4. Generates the first AI-powered question based on the disease/complaint
        5. Returns patient_id, visit_id, and the first question
      operationId: register_patient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterPatientRequest"
            examples:
              hypertension_patient:
                summary: Hypertension Patient
                value:
                  name: "John Doe"
                  mobile: "9123456789"
                  age: 35
                  disease: "Hypertension"
              diabetes_patient:
                summary: Diabetes Patient
                value:
                  name: "Jane Smith"
                  mobile: "9876543210"
                  age: 45
                  disease: "Diabetes"
              chest_pain_patient:
                summary: Chest Pain Patient
                value:
                  name: "Bob Johnson"
                  mobile: "5551234567"
                  age: 60
                  disease: "Chest Pain"
      responses:
        "201":
          description: Patient registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterPatientResponse"
              examples:
                success_response:
                  summary: Successful Registration
                  value:
                    patient_id: "JOHNDOE_9123456789"
                    visit_id: "CONSULT-20250103-001"
                    first_question: "What specific symptoms are you experiencing with your hypertension?"
                    message: "Patient registered successfully. Intake session started."
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                validation_error:
                  summary: Validation Error
                  value:
                    error: "VALIDATION_ERROR"
                    message: "Name cannot be empty"
                    details: {}

        "422":
          description: Invalid disease
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalid_disease:
                  summary: Invalid Disease
                  value:
                    error: "INVALID_DISEASE"
                    message: "Invalid disease/complaint: InvalidDisease"
                    details:
                      disease: "InvalidDisease"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /patients/consultations/answer:
    post:
      tags:
        - patients
      summary: Answer an intake question
      description: |
        Answer an intake question and get the next question or completion status.

        This endpoint:
        1. Validates the answer and finds the patient/visit
        2. Adds the answer to the intake session
        3. Uses AI to determine if sufficient information has been collected
        4. Generates the next adaptive question or completes the intake
        5. Returns the next question or completion status

        ## Question Flow
        - Maximum 8 questions per intake session
        - AI can stop early if sufficient information is collected
        - No duplicate questions are asked
        - Questions are adaptive based on previous answers
      operationId: answer_intake_question
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnswerIntakeRequest"
            examples:
              first_answer:
                summary: First Answer
                value:
                  patient_id: "JOHNDOE_9123456789"
                  visit_id: "CONSULT-20250103-001"
                  answer: "I have been experiencing high blood pressure for 3 months"
              follow_up_answer:
                summary: Follow-up Answer
                value:
                  patient_id: "JOHNDOE_9123456789"
                  visit_id: "CONSULT-20250103-001"
                  answer: "The headaches are severe, about 8 out of 10 on the pain scale"
      responses:
        "200":
          description: Answer processed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnswerIntakeResponse"
              examples:
                next_question:
                  summary: Next Question Available
                  value:
                    next_question: "How long have you been experiencing these symptoms?"
                    is_complete: false
                    question_count: 1
                    max_questions: 8
                    message: "Question 2 of 8"
                intake_complete:
                  summary: Intake Completed
                  value:
                    next_question: null
                    is_complete: true
                    question_count: 5
                    max_questions: 8
                    message: "Intake completed successfully. Ready for next step."
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Patient or visit not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                patient_not_found:
                  summary: Patient Not Found
                  value:
                    error: "PATIENT_NOT_FOUND"
                    message: "Patient with ID 'INVALID_1234567890' not found"
                    details:
                      patient_id: "INVALID_1234567890"
                visit_not_found:
                  summary: Visit Not Found
                  value:
                    error: "VISIT_NOT_FOUND"
                    message: "Visit with ID 'CONSULT-20250103-999' not found"
                    details:
                      visit_id: "CONSULT-20250103-999"
        "409":
          description: Intake already completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                intake_completed:
                  summary: Intake Already Completed
                  value:
                    error: "INTAKE_ALREADY_COMPLETED"
                    message: "Intake already completed for visit: CONSULT-20250103-001"
                    details:
                      visit_id: "CONSULT-20250103-001"
        "422":
          description: Question limit exceeded or duplicate question
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                question_limit:
                  summary: Question Limit Exceeded
                  value:
                    error: "QUESTION_LIMIT_EXCEEDED"
                    message: "Question limit exceeded. Current: 8, Max: 8"
                    details:
                      current_count: 8
                      max_count: 8
                duplicate_question:
                  summary: Duplicate Question
                  value:
                    error: "DUPLICATE_QUESTION"
                    message: "Duplicate question detected: What symptoms are you experiencing?"
                    details:
                      question: "What symptoms are you experiencing?"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    RegisterPatientRequest:
      type: object
      required:
        - name
        - mobile
        - age
        - disease
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 80
          description: Patient's full name
          example: "John Doe"
        mobile:
          type: string
          minLength: 10
          maxLength: 15
          pattern: '^\d{10,15}$'
          description: Mobile phone number (digits only)
          example: "9123456789"
        age:
          type: integer
          minimum: 0
          maximum: 120
          description: Patient's age in years
          example: 35
        disease:
          type: string
          description: Primary disease or complaint (free-text)
          example: "Hypertension"

    RegisterPatientResponse:
      type: object
      required:
        - patient_id
        - visit_id
        - first_question
        - message
      properties:
        patient_id:
          type: string
          pattern: '^[A-Z0-9]+_\d+$'
          description: Generated patient ID in format {NAME}_{MOBILE}
          example: "JOHNDOE_9123456789"
        visit_id:
          type: string
          pattern: '^CONSULT-\d{8}-\d{3}$'
          description: Generated visit ID in format CONSULT-YYYYMMDD-XXX
          example: "CONSULT-20250103-001"
        first_question:
          type: string
          description: AI-generated first question based on the disease
          example: "What specific symptoms are you experiencing with your hypertension?"
        message:
          type: string
          description: Success message
          example: "Patient registered successfully. Intake session started."

    AnswerIntakeRequest:
      type: object
      required:
        - patient_id
        - visit_id
        - answer
      properties:
        patient_id:
          type: string
          pattern: '^[A-Z0-9]+_\d+$'
          description: Patient ID from registration
          example: "JOHNDOE_9123456789"
        visit_id:
          type: string
          pattern: '^CONSULT-\d{8}-\d{3}$'
          description: Visit ID from registration
          example: "CONSULT-20250103-001"
        answer:
          type: string
          minLength: 1
          maxLength: 1000
          description: Patient's answer to the question
          example: "I have been experiencing high blood pressure for 3 months"

    AnswerIntakeResponse:
      type: object
      required:
        - next_question
        - is_complete
        - question_count
        - max_questions
        - message
      properties:
        next_question:
          type: string
          nullable: true
          description: Next question to ask (null if intake is complete)
          example: "How long have you been experiencing these symptoms?"
        is_complete:
          type: boolean
          description: Whether the intake session is complete
          example: false
        question_count:
          type: integer
          minimum: 0
          maximum: 8
          description: Current number of questions asked
          example: 1
        max_questions:
          type: integer
          description: Maximum number of questions allowed
          example: 8
        message:
          type: string
          description: Status message
          example: "Question 2 of 8"

    HealthResponse:
      type: object
      required:
        - status
        - timestamp
        - version
        - service
      properties:
        status:
          type: string
          enum: ["healthy", "unhealthy"]
          description: Service health status
          example: "healthy"
        timestamp:
          type: string
          format: date-time
          description: Current timestamp
          example: "2025-01-03T12:00:00Z"
        version:
          type: string
          description: API version
          example: "0.1.0"
        service:
          type: string
          description: Service name
          example: "Clinic-AI Intake Assistant"

    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error type code
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: Human-readable error message
          example: "Name cannot be empty"
        details:
          type: object
          description: Additional error details
          additionalProperties: true
          example:
            field: "name"
            value: ""

    QuestionAnswer:
      type: object
      required:
        - question_id
        - question
        - answer
        - timestamp
        - question_number
      properties:
        question_id:
          type: string
          description: Unique question identifier
          example: "Q12345678"
        question:
          type: string
          description: Question text
          example: "What specific symptoms are you experiencing?"
        answer:
          type: string
          description: Patient's answer
          example: "I have been experiencing headaches and dizziness"
        timestamp:
          type: string
          format: date-time
          description: When the question was asked
          example: "2025-01-03T12:00:00Z"
        question_number:
          type: integer
          description: Question number in sequence
          example: 1

    IntakeSummary:
      type: object
      required:
        - visit_id
        - disease
        - status
        - questions_asked
        - total_questions
        - max_questions
        - intake_status
        - started_at
      properties:
        visit_id:
          type: string
          description: Visit identifier
          example: "CONSULT-20250103-001"
        disease:
          type: string
          description: Disease or complaint
          example: "Hypertension"
        status:
          type: string
          description: Visit status
          example: "intake"
        questions_asked:
          type: array
          items:
            $ref: "#/components/schemas/QuestionAnswer"
          description: List of questions and answers
        total_questions:
          type: integer
          description: Total questions asked
          example: 3
        max_questions:
          type: integer
          description: Maximum questions allowed
          example: 8
        intake_status:
          type: string
          enum: ["in_progress", "completed", "cancelled"]
          description: Intake session status
          example: "in_progress"
        started_at:
          type: string
          format: date-time
          description: When intake started
          example: "2025-01-03T12:00:00Z"
        completed_at:
          type: string
          format: date-time
          nullable: true
          description: When intake completed (null if not completed)
          example: "2025-01-03T12:15:00Z"

  securitySchemes:
    # Future authentication schemes can be added here
    # BearerAuth:
    #   type: http
    #   scheme: bearer
    #   bearerFormat: JWT

security:
  # No security requirements for development
  - {}
